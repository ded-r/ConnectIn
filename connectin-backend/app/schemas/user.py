from datetime import date
from typing import Optional, List

from pydantic import BaseModel
from pydantic import EmailStr, Field, HttpUrl


class SkillBase(BaseModel):
    """–°—Ö–µ–º–∞ –Ω–∞–≤—ã–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è –≤ API."""
    id: int
    name: str

    class Config:
        from_attributes = True


class ProjectBase(BaseModel):
    """–°—Ö–µ–º–∞ –ø—Ä–æ–µ–∫—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è –≤ API."""
    id: int
    name: str
    description: Optional[str] = None

    class Config:
        from_attributes = True

# üîπ Education Schema
class EducationBase(BaseModel):
    institution: str = Field(..., max_length=255)
    degree: str = Field(..., max_length=255)
    start_year: date
    end_year: Optional[date] = None # ‚úÖ May be empty if education is ongoing
    field_of_study: Optional[str] = Field(None, max_length=255)
    relevant_courses: Optional[str] = None
    description: Optional[str] = None

    class Config:
        from_attributes = True

class EducationCreate(EducationBase):
    """Schema for creating an education entry."""
    pass

class EducationUpdate(BaseModel):
    """Schema for updating an education entry."""
    institution: Optional[str] = Field(None, max_length=255)
    degree: Optional[str] = Field(None, max_length=255)
    start_year: Optional[date] = None
    end_year: Optional[date] = None
    field_of_study: Optional[str] = Field(None, max_length=255)
    relevant_courses: Optional[str] = None
    description: Optional[str] = None
    
class EducationOut(BaseModel):
    id: int  # ‚úÖ Ensure `id` is included
    institution: str
    degree: str
    field_of_study: Optional[str] = None  # Make field_of_study optional
    start_year: date
    end_year: Optional[date] = None
    description: Optional[str] = None
    
    class Config:
        from_attributes = True  # ‚úÖ FIXED: Use `from_attributes` to support ORM conversion
        
# üîπ Experience Schema
class ExperienceBase(BaseModel):
    company: str = Field(..., max_length=255)
    role: str = Field(..., max_length=255)
    # 4. –ó–∞–º–µ–Ω—è–µ–º _year –Ω–∞ _date
    start_year: date
    end_year: Optional[date] = None # –î–∞—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
    # 5. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    description: Optional[str] = None

    class Config:
        from_attributes = True

class ExperienceCreate(ExperienceBase):
    """Schema for creating an experience entry."""
    pass

class ExperienceUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –û–ë–ù–û–í–õ–ï–ù–ò–Ø –∑–∞–ø–∏—Å–∏ –æ–± –æ–ø—ã—Ç–µ (–≤—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã)."""
    company: Optional[str] = Field(None, max_length=255)
    role: Optional[str] = Field(None, max_length=255)
    start_year: Optional[date] = None
    end_year: Optional[date] = None
    description: Optional[str] = None
    
class ExperienceOut(ExperienceBase):
    id: int
    # company: str
    # role: str
    # start_year: int
    # end_year: Optional[int]  # ‚úÖ May be empty if job is ongoing

    class Config:
        from_attributes = True  # ‚úÖ FIXED: Use `from_attributes` to support ORM conversion

class UserBase(BaseModel):
    """–û–±—â–∏–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Create/Update)."""
    email: Optional[EmailStr] = None
    username: Optional[str] = Field(None, max_length=50)
    first_name: Optional[str] = Field(None, max_length=50)
    last_name: Optional[str] = Field(None, max_length=50)
    city: Optional[str] = Field(None, max_length=100)
    position: Optional[str] = Field(None, max_length=100)
    github: Optional[str] = Field(None, max_length=255)
    linkedin: Optional[str] = Field(None, max_length=255)
    telegram: Optional[str] = Field(None, max_length=255)
    # avatar_url: Optional[HttpUrl] = None  # ‚úÖ NEW: URL for profile picture

class UserCreate(UserBase):
    """–°—Ö–µ–º–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    password: str = Field(..., min_length=6)

class UserUpdate(UserBase):
    """–°—Ö–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    avatar_url: Optional[str] = Field(None, max_length=500)  # –î–æ–±–∞–≤–ª–µ–Ω–æ URL –∞–≤–∞—Ç–∞—Ä–∞
    status: Optional[str] = Field(None, max_length=100)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ —Å—Ç–∞—Ç—É—Å–∞

class AvatarUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    avatar_url: str = Field(..., max_length=500)

class StatusUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    status: str = Field(..., max_length=100)

class BasicInfoUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    first_name: Optional[str] = Field(None, max_length=50)
    last_name: Optional[str] = Field(None, max_length=50)
    city: Optional[str] = Field(None, max_length=100)
    position: Optional[str] = Field(None, max_length=100)

class SocialLinksUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    github: Optional[str] = Field(None, max_length=255)
    linkedin: Optional[str] = Field(None, max_length=255)
    telegram: Optional[str] = Field(None, max_length=255)
    
    class Config:
        # –°—Ö–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        extra = "ignore"

class ContactInfoUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    email: Optional[EmailStr] = None
    username: Optional[str] = Field(None, max_length=50, min_length=3)

class UserOut(BaseModel):
    id: int
    email: EmailStr
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    city: Optional[str] = None
    position: Optional[str] = None
    github: Optional[str] = None
    linkedin: Optional[str] = None
    telegram: Optional[str] = None
    avatar_url: Optional[str] = None  # ‚úÖ Add this field
    skills: List[SkillBase] = []
    projects: List[ProjectBase] = []
    education: List[EducationOut] = []
    experience: List[ExperienceOut] = []
    status: Optional[str] = None 
    
    @classmethod
    def from_orm(cls, user):
        return cls(
            id=user.id,
            email=user.email,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            city=user.city,
            position=user.position,
            github=user.github,
            linkedin=user.linkedin,
            telegram=user.telegram,
            avatar_url=user.avatar_url,  # ‚úÖ Now frontend gets avatar
            skills=[SkillBase.model_validate(skill) for skill in user.skills],
            projects=[ProjectBase.model_validate(project) for project in user.projects],
            education=[EducationOut.model_validate(edu) for edu in user.education],
            experience=[ExperienceOut.model_validate(exp) for exp in user.experience],
            status=getattr(user, 'status', None) 
        )

    class Config:
        from_attributes = True

class UserOutWithToken(UserOut):
    """–°—Ö–µ–º–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞"""
    access_token: str
    token_type: str