"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—ç–Ω–¥–ø–æ–∏–Ω—Ç /register).
2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT (—ç–Ω–¥–ø–æ–∏–Ω—Ç /login).
3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —Ç–æ–∫–µ–Ω–∞).
"""

from datetime import datetime, timedelta

from fastapi import APIRouter, Depends, HTTPException, status, Request
from fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer
from jose import JWTError, jwt
from sqlalchemy.orm import Session

# –í–Ω–æ–≤—å –≤–∫–ª—é—á–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ö–µ–º
from app.schemas.user import UserCreate, UserOut
from app.models.user import User
from app.utils.auth import hash_password, verify_password
from app.database.connection import get_db
from app.core.config import settings
from fastapi.responses import RedirectResponse
from app.utils.auth import generate_google_login_url, handle_google_callback
from app.models.user import User

router = APIRouter()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è JWT
SECRET_KEY = settings.SECRET_KEY
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30  # 30 –º–∏–Ω—É—Ç (–º–æ–∂–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å)


@router.post("/register", response_model=UserOut, summary="–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
def register_user(user_data: UserCreate, db: Session = Depends(get_db)):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ email –≤ –±–∞–∑–µ.
    –•—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª—å –≤ —Ö—ç—à–µ (bcrypt), –∞ –Ω–µ '–≤ –æ—Ç–∫—Ä—ã—Ç—É—é'.
    """
    existing_user = db.query(User).filter(
        (User.email == user_data.email) | (User.username == user_data.username)
    ).first()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )

    hashed_pw = hash_password(user_data.password)
    new_user = User(
        username=user_data.username,
        email=user_data.email,
        hashed_password=hashed_pw,
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user


@router.post("/login", summary="–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
def login_user(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: Session = Depends(get_db)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É (–ø–æ–ª—É—á–µ–Ω–∏–µ JWT-—Ç–æ–∫–µ–Ω–∞).
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç form_data c –ø–æ–ª—è–º–∏:
    - username (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ email)
    - password
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç access_token –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    
    user = db.query(User).filter(User.username == form_data.username).first()
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å."
        )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT-—Ç–æ–∫–µ–Ω
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    payload = {
        "sub": user.email,
        "exp": datetime.utcnow() + access_token_expires
    }
    access_token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)

    return {
        "access_token": access_token,
        "token_type": "bearer",
        "user": UserOut.from_orm(user)
    }

def get_current_user(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db)
) -> User:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT-—Ç–æ–∫–µ–Ω–∞.

    - –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT-—Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ.
    - –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ (—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω) ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç HTTPException.
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫",
        headers={"WWW-Authenticate": "Bearer"},
    )

    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email: str = payload.get("sub")
        if not email:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    user = db.query(User).filter(User.email == email).first()
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )

    return user


@router.get("/me", response_model=UserOut, summary="–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
def read_current_user(current_user: User = Depends(get_current_user)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ —Ç–æ–∫–µ–Ω–∞).
    """
    return current_user


#---------------------GOOGLE oAUTH----------------------------------------------
@router.get("/google/login", summary="Google Login")
async def google_login(request: Request):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google.
    """
    login_url = await generate_google_login_url(request)

    if not login_url:
        raise HTTPException(
            status_code=500,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Google OAuth URL"
        )

    return RedirectResponse(url=login_url)  # ‚úÖ –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL!


@router.get("/google/callback", summary="Google Callback")
async def google_callback(request: Request, db: Session = Depends(get_db)):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Google OAuth –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç/–ª–æ–≥–∏–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_info = await handle_google_callback(request)
    if not user_info:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Google."
        )

    # üõ† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º username, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    username = user_info.get("name", "").replace(" ", "_") or user_info["email"].split("@")[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = db.query(User).filter(User.email == user_info["email"]).first()
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            email=user_info["email"],
            username=username,  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        )
        db.add(user)
        db.commit()
        db.refresh(user)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JWT —Ç–æ–∫–µ–Ω (–∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º)
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    payload = {
        "sub": user.email,
        "exp": datetime.utcnow() + access_token_expires,
    }
    access_token = jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)

    return {
        "access_token": access_token,
        "token_type": "bearer",
        "user": user_info,
    }
