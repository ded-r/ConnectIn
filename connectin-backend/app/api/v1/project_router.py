"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–æ–¥–µ–ª—å—é –ü—Ä–æ–µ–∫—Ç–∞.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã.
–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏, –∞ –≤–ª–∞–¥–µ–ª—å—Ü—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Ö –æ–¥–æ–±—Ä—è—Ç—å/–æ—Ç–∫–ª–æ–Ω—è—Ç—å.
"""

from fastapi import APIRouter, Depends, HTTPException #,status
from sqlalchemy.orm import Session
from typing import List

from app.database.connection import get_db
from app.models.project import Project
from app.models.user import User
from app.schemas import UserOut
from app.schemas.project import ProjectCreate, ProjectOut, ProjectUpdate, ApplicationOut
from app.api.v1.auth_router import get_current_user
from app.models.project import project_applications, project_members_association, project_tags_association, project_skills_association
from app.schemas.project import ApplicationDecisionRequest, ApplicationStatus

router = APIRouter()

# üîπ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å —Ç–µ–≥–∞–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏
@router.post("/", response_model=ProjectOut, summary="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
def create_project(
    project_data: ProjectCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
    –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ (tag_ids) –∏ –Ω–∞–≤—ã–∫–æ–≤ (skill_ids).
    """
    # ‚úÖ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    new_project = Project(
        name=project_data.name,
        description=project_data.description,
        owner_id=current_user.id
    )
    db.add(new_project)
    db.commit()
    db.refresh(new_project)

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if project_data.tag_ids:
        for tag_id in project_data.tag_ids:
            db.execute(
                project_tags_association.insert().values(
                    project_id=new_project.id, tag_id=tag_id
                )
            )

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if project_data.skill_ids:
        for skill_id in project_data.skill_ids:
            db.execute(
                project_skills_association.insert().values(
                    project_id=new_project.id, skill_id=skill_id
                )
            )

    db.commit()

    # ‚úÖ Fetch project again with related tags and skills
    db.refresh(new_project)
    project_with_tags_and_skills = db.query(Project).filter(Project.id == new_project.id).first()

    return {
        "id": project_with_tags_and_skills.id,
        "name": project_with_tags_and_skills.name,
        "description": project_with_tags_and_skills.description,
        "owner_id": project_with_tags_and_skills.owner_id,
        "members": [ {"id": user.id, "username": user.username} for user in project_with_tags_and_skills.members ],
        "applicants": [ {"id": user.id, "username": user.username} for user in project_with_tags_and_skills.applicants ],
        "tags": [ {"id": tag.id, "name": tag.name} for tag in project_with_tags_and_skills.tags ],  # ‚úÖ Convert tags to dict
        "skills": [ {"id": skill.id, "name": skill.name} for skill in project_with_tags_and_skills.skills ]  # ‚úÖ Convert skills to dict
    }

@router.get("/my", response_model=List[ProjectOut], summary="–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
def get_my_projects(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    projects = db.query(Project).filter(Project.owner_id == current_user.id).all()

    formatted_projects = []
    for project in projects:
        formatted_projects.append({
            "id": project.id,
            "name": project.name,
            "description": project.description,
            "owner": {  # ‚úÖ Fix here: Return `owner` object instead of just `owner_id`
                "id": project.owner.id,
                "username": project.owner.username,
                "avatar_url": project.owner.avatar_url
            },
            "tags": [{"id": tag.id, "name": tag.name} for tag in project.tags],  # ‚úÖ Include Tags
            "skills": [{"id": skill.id, "name": skill.name} for skill in project.skills],  # ‚úÖ Include Skills
        })

    return formatted_projects


# üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
@router.get("/", response_model=List[ProjectOut], summary="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
def read_projects(db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –±–∞–∑–µ.
    """
    return db.query(Project).all()


@router.get("/{project_id}", response_model=ProjectOut, summary="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ ID")
def read_project(project_id: int, db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ ID.
    """
    project = db.query(Project).filter(Project.id == project_id).first()

    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # ‚úÖ Convert SQLAlchemy model to dictionary format for Pydantic
    formatted_project = {
        "id": project.id,
        "name": project.name,
        "description": project.description,
        "owner": {  # ‚úÖ Convert `owner` to a dictionary
            "id": project.owner.id,
            "username": project.owner.username,
            "avatar_url": project.owner.avatar_url
        } if project.owner else None,
        "tags": [{"id": tag.id, "name": tag.name} for tag in project.tags],  # ‚úÖ Convert Tags
        "skills": [{"id": skill.id, "name": skill.name} for skill in project.skills],  # ‚úÖ Convert Skills
        "members": [{"id": user.id, "username": user.username} for user in project.members],  # ‚úÖ Convert Members
        "applicants": [{"id": user.id, "username": user.username} for user in project.applicants],  # ‚úÖ Convert Applicants
    }

    return formatted_project  # ‚úÖ Now it matches `ProjectOut` schema



# üîπ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
@router.put("/{project_id}", response_model=ProjectOut, summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
def update_project(
    project_id: int,
    project_data: ProjectUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü).
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if project.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–æ–π –ø—Ä–æ–µ–∫—Ç")

    project.name = project_data.name or project.name
    project.description = project_data.description or project.description

    db.commit()
    db.refresh(project)
    return project


# üîπ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
@router.delete("/{project_id}", summary="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
def delete_project(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü).
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if project.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π –ø—Ä–æ–µ–∫—Ç")

    db.delete(project)
    db.commit()
    return {"detail": "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"}


# üîπ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
@router.post("/{project_id}/apply", summary="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
def apply_to_project(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    if db.query(project_members_association).filter_by(user_id=current_user.id, project_id=project_id).first():
        raise HTTPException(status_code=400, detail="–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—è–≤–∫—É
    if db.query(project_applications).filter_by(user_id=current_user.id, project_id=project_id).first():
        raise HTTPException(status_code=400, detail="–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞—è–≤–æ–∫
    new_application = project_applications.insert().values(user_id=current_user.id, project_id=project_id)
    db.execute(new_application)
    db.commit()

    return {"detail": "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞"}


# üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
from sqlalchemy import select


@router.get("/{project_id}/members", response_model=list[UserOut])
def get_project_members(
        project_id: int,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞"""
    project = db.get(Project, project_id)
    if not project:
        raise HTTPException(404, "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
    if not project.is_visible_to(current_user):
        raise HTTPException(403, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ JOIN
    stmt = (
        select(User)
        .join(project_members_association, User.id == project_members_association.c.user_id)
        .where(project_members_association.c.project_id == project_id)
    )

    members = db.execute(stmt).scalars().all()
    return members

# üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç
@router.get("/{project_id}/applications", response_model=list[ApplicationOut])
def get_project_applications(
        project_id: int,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    project = db.get(Project, project_id)
    if not project:
        raise HTTPException(404, "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if project.owner_id != current_user.id:
        raise HTTPException(403, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏")

    # –ó–∞–ø—Ä–æ—Å —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
    stmt = select(
        project_applications.c.user_id,
        User.username,
        User.email
    ).join(User, User.id == project_applications.c.user_id)

    applications = db.execute(stmt).all()
    return [{"user_id": app["user_id"], "username": app["username"]} for app in applications]


# üîπ –û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
@router.post("/{project_id}/applications/{user_id}/decision", summary="–ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
def decide_application(
    project_id: int,
    user_id: int,
    request: ApplicationDecisionRequest,  # Accepting JSON body instead of query
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if project.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞")

    application = db.execute(
        project_applications.select().where(
            (project_applications.c.project_id == project_id) &
            (project_applications.c.user_id == user_id)
        )
    ).fetchone()

    if not application:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if request.decision == ApplicationStatus.ACCEPTED:
        # ‚úÖ Add user to project members table
        db.execute(project_members_association.insert().values(user_id=user_id, project_id=project_id))
        # ‚úÖ Remove application after approval
        db.execute(project_applications.delete().where(
            (project_applications.c.project_id == project_id) &
            (project_applications.c.user_id == user_id)
        ))
        db.commit()
        return {"detail": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç –≤ –ø—Ä–æ–µ–∫—Ç"}

    elif request.decision == ApplicationStatus.REJECTED:
        # ‚úÖ Remove application from applications table
        db.execute(project_applications.delete().where(
            (project_applications.c.project_id == project_id) &
            (project_applications.c.user_id == user_id)
        ))
        db.commit()
        return {"detail": "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"}
    
    
# üîπ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞)
@router.delete("/{project_id}/members/{user_id}", summary="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞")
def remove_user_from_project(
    project_id: int,
    user_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if project.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    member = db.execute(
        project_members_association.select().where(
            (project_members_association.c.project_id == project_id) &
            (project_members_association.c.user_id == user_id)
        )
    ).fetchone()

    if not member:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    db.execute(project_members_association.delete().where(
        (project_members_association.c.project_id == project_id) &
        (project_members_association.c.user_id == user_id)
    ))
    db.commit()

    return {"detail": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"}
