import os
import logging
from typing import Dict, Any
from datetime import date

# --- FastAPI & SQLAlchemy ---
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

# --- Project Imports ---
from app.database.connection import get_db
from app.models.user import User, Experience, Education
from app.models.skill import Skill
from app.api.v1.auth import get_current_user
from app.core.config import settings

# --- AI & Formatting ---
import openai
import markdown
from markdown.extensions import Extension

# --- Setup ---
logger = logging.getLogger(__name__)

# --- Router ---
router = APIRouter()

class LaTeXStyleExtension(Extension):
    def extendMarkdown(self, md):
        md.registerExtension(self)
        md.parser.blockprocessors.deregister('indent')
        md.inlinePatterns.deregister('emphasis')

# --- –•–µ–ª–ø–µ—Ä: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
# (–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–µ –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–¥–∞)
def get_user_profile_data(user: User) -> dict:
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ AI."""
    logger.debug(f"Collecting profile data for user: {user.username}")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è
    user_name = user.username
    if user.first_name and user.last_name:
        user_name = f"{user.first_name} {user.last_name}"
    elif user.first_name: user_name = user.first_name
    elif user.last_name: user_name = user.last_name

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –û–ø—ã—Ç
    experience_list = []
    if hasattr(user, 'experience') and user.experience:
        sorted_exp = sorted(
            [exp for exp in user.experience if exp],
            key=lambda x: (x.start_year, x.end_year is None, x.end_year), reverse=True
        )
        for exp in sorted_exp:
            # **–í–ê–ñ–ù–û:** –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ description –≤ –º–æ–¥–µ–ª—å Experience –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ!
            # –ü–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.
            exp_str = f"- {exp.role} –≤ {exp.company} ({exp.start_year} - {exp.end_year or '–Ω.–≤.'})"
            # if exp.description: exp_str += f"\n  –û–ø–∏—Å–∞–Ω–∏–µ: {exp.description}" # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            experience_list.append(exp_str)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    education_list = []
    if hasattr(user, 'education') and user.education:
        sorted_edu = sorted(
            [edu for edu in user.education if edu],
            key=lambda x: (x.start_year, x.end_year is None, x.end_year), reverse=True
        )
        for edu in sorted_edu:
            # **–í–ê–ñ–ù–û:** –î–æ–±–∞–≤—å—Ç–µ field_of_study –∏ description –≤ –º–æ–¥–µ–ª—å Education –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞.
            edu_str = f"- {edu.institution}, {edu.degree} ({edu.start_year} - {edu.end_year or '–Ω.–≤.'})"
            # if edu.field_of_study: edu_str += f" (–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {edu.field_of_study})"
            # if edu.description: edu_str += f"\n  –û–ø–∏—Å–∞–Ω–∏–µ: {edu.description}"
            education_list.append(edu_str)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ù–∞–≤—ã–∫–∏
    skills_list = sorted([skill.name for skill in getattr(user, 'skills', []) if skill and skill.name])

    profile_data = {
        "name": user_name,
        "position": user.position or "", # –ó–∞–≥–æ–ª–æ–≤–æ–∫/–î–æ–ª–∂–Ω–æ—Å—Ç—å
        "city": user.city or "", # –ì–æ—Ä–æ–¥
        "email": user.email or "",
        "linkedin": user.linkedin or "",
        "github": user.github or "",
        "telegram": user.telegram or "",
        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
        "experience_details": "\n".join(experience_list) if experience_list else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø—ã—Ç–µ.",
        "education_details": "\n".join(education_list) if education_list else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏.",
        "skills_list": ", ".join(skills_list) if skills_list else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö.",
        # –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ "bio" –∏–ª–∏ "about" –≤ –º–æ–¥–µ–ª—å User, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        "about_me": getattr(user, 'bio', "") # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ bio
    }
    logger.debug(f"Profile data collected for {user.username}: {list(profile_data.keys())}")
    return profile_data



def create_resume_prompt(profile_data: dict) -> str:
    prompt = f"""
Generate a professional resume in Russian using Markdown with this structure:

# {profile_data['name']}
**{profile_data['position']}**  
üìç {profile_data['city']}  
‚úâÔ∏è {profile_data['email']} | üîó LinkedIn: {profile_data['linkedin']} | üêô GitHub: {profile_data['github']} | üì® Telegram: {profile_data['telegram']}

## Professional Summary
{profile_data['about_me'] or '[Provide professional summary]'}

## Technical Skills
{profile_data['skills_list'] or 'No skills listed'}

## Professional Experience
{profile_data['experience_details'] or 'No experience listed'}

## Education
{profile_data['education_details'] or 'No education listed'}

Use:
- ## for sections
- **bold** for company names
- *italic* for job titles
- - for list items
- Proper emojis
"""
    return prompt

# --- –•–µ–ª–ø–µ—Ä: –í—ã–∑–æ–≤ OpenAI API ---
async def generate_text_via_openai(prompt: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."""
    if not settings.OPENAI_API_KEY:
        logger.error("OpenAI API key is not configured.")
        raise HTTPException(status_code=500, detail="AI service is not configured (API key missing).")

    logger.info("Sending request to OpenAI API...")
    try:
        client = openai.AsyncOpenAI(api_key=settings.OPENAI_API_KEY)
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1500,
            temperature=0.6,
            n=1,
            stop=None
        )
        generated_text = response.choices[0].message.content.strip()
        logger.info("Received response from OpenAI API.")
        return generated_text
    except openai.RateLimitError as e:
        logger.warning(f"OpenAI Rate Limit Exceeded: {e}")
        raise HTTPException(status_code=status.HTTP_429_TOO_MANY_REQUESTS, detail="AI service rate limit exceeded. Please try again later.")
    except openai.AuthenticationError as e:
        logger.error(f"OpenAI Authentication Error: {e}. Check API Key.")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="AI service authentication failed.")
    except Exception as e:
        logger.exception(f"OpenAI API call failed: {e}")  # –õ–æ–≥–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π traceback
        raise HTTPException(status_code=status.HTTP_503_SERVICE_UNAVAILABLE, detail="Failed to communicate with AI service.")


def convert_to_professional_html(markdown_text: str) -> str:
    extensions = ['extra', 'smarty', LaTeXStyleExtension(), 'nl2br', 'tables']
    html_content = markdown.markdown(markdown_text, extensions=extensions)

    latex_style = """
    <style>
        body { font-family: 'Latin Modern Roman', Times, serif; line-height: 1.6; margin: 2cm; }
        h1 { font-size: 22pt; border-bottom: 2pt solid #333; padding-bottom: 3pt; }
        h2 { font-size: 16pt; margin-top: 18pt; }
        ul { margin: 6pt 0; padding-left: 15pt; }
        li { margin: 3pt 0; }
        .contact-info { margin: 9pt 0; font-size: 10.5pt; }
        .section { margin-bottom: 12pt; }
    </style>
    """
    return f"<!DOCTYPE html><html><head>{latex_style}</head><body>{html_content}</body></html>"


# --- –û—Å–Ω–æ–≤–Ω–æ–π API –≠–Ω–¥–ø–æ–∏–Ω—Ç ---
@router.post("/generate-ai", response_model=Dict[str, str])
async def generate_ai_resume_endpoint(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    try:
        profile_data = get_user_profile_data(current_user)
        prompt = create_resume_prompt(profile_data)
        markdown_resume = await generate_text_via_openai(prompt)
        html_resume = convert_to_professional_html(markdown_resume)
        return {"resume_html": html_resume}
    except Exception as e:
        logger.error(f"Resume generation error: {str(e)}")
        raise HTTPException(status_code=500, detail="Resume generation failed")