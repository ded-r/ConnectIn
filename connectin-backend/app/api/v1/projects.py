"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –º–æ–¥–µ–ª—å—é –ü—Ä–æ–µ–∫—Ç–∞.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã.
–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏, –∞ –≤–ª–∞–¥–µ–ª—å—Ü—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Ö –æ–¥–æ–±—Ä—è—Ç—å/–æ—Ç–∫–ª–æ–Ω—è—Ç—å.
"""
from datetime import datetime
from math import ceil

from fastapi import APIRouter, Depends, HTTPException, Query
from pydantic import BaseModel
from sqlalchemy.orm import Session
from sqlalchemy import case, func
from typing import List
from sqlalchemy.orm import joinedload
from fastapi import Query, HTTPException
from typing import List

from app.database.connection import get_db
from app.models import Tag, Skill
from app.models.project import Project
from app.models.user import User
from app.schemas.project import ProjectCreate, ProjectOut, ProjectProfileOut, ProjectUpdate
from app.schemas.user import UserOut
from app.schemas.tag import TagOut
from app.schemas.skill import SkillOut
from app.api.v1.auth import get_current_user
from app.models.project import project_applications, project_members_association, project_tags_association, project_skills_association
from app.schemas.project import ApplicationDecisionRequest, ApplicationStatus
from app.models.vote import ProjectVote
from app.models.comment import ProjectComment
from app.schemas.comment import CommentOut, CommentCreate
from app.models.recommendation import ProjectRecommendation
from app.utils import get_logger

router = APIRouter()
logger = get_logger(__name__)

class VoteRequest(BaseModel):
    is_upvote: bool

class VoteStatusResponse(BaseModel):
    has_voted: bool
    is_upvote: bool | None = None
    vote_count: int = 0

# üîπ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å —Ç–µ–≥–∞–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏
@router.post("/", response_model=ProjectOut, summary="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
def create_project(
    project_data: ProjectCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
    –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ (tag_ids) –∏ –Ω–∞–≤—ã–∫–æ–≤ (skill_ids).
    """
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    new_project = Project(
        name=project_data.name,
        description=project_data.description,
        owner_id=current_user.id
    )
    db.add(new_project)
    db.commit()
    db.refresh(new_project)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if project_data.tag_ids:
        selected_tags = db.query(Tag).filter(Tag.id.in_(project_data.tag_ids)).all()
        if not selected_tags:
            raise HTTPException(status_code=400, detail="Invalid tags selected.")
        new_project.tags = selected_tags

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if project_data.skill_ids:
        selected_skills = db.query(Skill).filter(Skill.id.in_(project_data.skill_ids)).all()
        if not selected_skills:
            raise HTTPException(status_code=400, detail="Invalid skills selected.")
        new_project.skills = selected_skills

    db.commit()
    db.refresh(new_project)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ProjectOut
    return ProjectOut(
        id=new_project.id,
        name=new_project.name,
        description=new_project.description,
        owner=UserOut.model_validate(new_project.owner) if new_project.owner else None,
        tags=[TagOut(id=tag.id, name=tag.name) for tag in new_project.tags],
        skills=[SkillOut(id=skill.id, name=skill.name) for skill in new_project.skills],
        members=[UserOut.model_validate(user) for user in new_project.members],
        applicants=[UserOut.model_validate(user) for user in new_project.applicants],
        comments_count=len(new_project.comments),
        vote_count=db.query(
            func.sum(case((ProjectVote.is_upvote, 1), else_=-1))
        ).filter(ProjectVote.project_id == new_project.id).scalar() or 0
    )

# üîπ –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã
@router.get("/my", response_model=List[ProjectOut], summary="–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
def get_my_projects(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    projects = db.query(Project).filter(Project.owner_id == current_user.id).all()

    return [
        ProjectOut(
            id=project.id,
            name=project.name,
            description=project.description,
            owner=UserOut.model_validate(project.owner) if project.owner else None,
            tags=[TagOut.model_validate(tag, from_attributes=True) for tag in project.tags],
            skills=[SkillOut.model_validate(skill, from_attributes=True) for skill in project.skills],
            members=[UserOut.model_validate(user, from_attributes=True) for user in project.members],
            applicants=[UserOut.model_validate(user, from_attributes=True) for user in project.applicants],
            comments_count=len(project.comments),
            vote_count=db.query(
                func.sum(case((ProjectVote.is_upvote, 1), else_=-1))
            ).filter(ProjectVote.project_id == project.id).scalar() or 0
        )
        for project in projects
    ]

# üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
@router.get("/", response_model=dict)
def read_projects(
    page: int = Query(1, ge=1),
    page_size: int = Query(5, ge=1, le=100),
    tag_ids: List[int] = Query(None),
    db: Session = Depends(get_db)
):
    """
    Get a list of all projects with pagination and optional tag filtering.
    """
    try:
        # Base query with eager loading of relationships
        query = db.query(Project).options(
            joinedload(Project.owner),
            joinedload(Project.tags),
            joinedload(Project.skills),
            joinedload(Project.members)
        )

        # Apply tag filter if provided
        if tag_ids:
            query = query.join(Project.tags).filter(Tag.id.in_(tag_ids))

        # Get total count for pagination
        total_count = query.distinct().count()

        # Calculate total pages
        total_pages = ceil(total_count / page_size)

        # Apply pagination and ordering
        projects = (
            query
            .distinct()
            .order_by(Project.id.desc())
            .offset((page - 1) * page_size)
            .limit(page_size)
            .all()
        )

        # Format projects for response
        formatted_projects = [
            ProjectOut(
                id=project.id,
                name=project.name,
                description=project.description,
                owner=UserOut.model_validate(project.owner) if project.owner else None,
                tags=[TagOut.model_validate(tag, from_attributes=True) for tag in project.tags],
                skills=[SkillOut.model_validate(skill, from_attributes=True) for skill in project.skills],
                members=[UserOut.model_validate(user, from_attributes=True) for user in project.members],
                comments_count=len(project.comments),
                vote_count=db.query(
                    func.sum(case((ProjectVote.is_upvote, 1), else_=-1))
                ).filter(ProjectVote.project_id == project.id).scalar() or 0
            )
            for project in projects
        ]

        return {
            "items": formatted_projects,
            "total": total_count,
            "page": page,
            "page_size": page_size,
            "total_pages": total_pages
        }

    except Exception as e:
        logger.error(f"Error fetching projects: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to fetch projects")

@router.get("/filter_by_tags", response_model=dict)
def filter_projects_by_tags(
    tag_ids: List[int] = Query([]),
    page: int = Query(1, ge=1),
    page_size: int = Query(5, ge=1, le=100),
    db: Session = Depends(get_db)
):
    """
    Filter projects by tags with pagination support.
    """
    try:
        # Base query with eager loading
        query = db.query(Project).options(
            joinedload(Project.owner),
            joinedload(Project.tags),
            joinedload(Project.skills),
            joinedload(Project.members)
        )

        # Apply tag filter
        if tag_ids:
            query = query.join(Project.tags).filter(Tag.id.in_(tag_ids))
        else:
            # If no tags provided, return all projects
            query = query

        # Get total count for pagination
        total_count = query.distinct().count()

        # Calculate total pages
        total_pages = ceil(total_count / page_size)

        # Apply pagination and ordering
        projects = (
            query
            .distinct()
            .order_by(Project.id.desc())
            .offset((page - 1) * page_size)
            .limit(page_size)
            .all()
        )

        # Format projects for response
        formatted_projects = [
            ProjectOut(
                id=project.id,
                name=project.name,
                description=project.description,
                owner=UserOut.model_validate(project.owner) if project.owner else None,
                tags=[TagOut.model_validate(tag, from_attributes=True) for tag in project.tags],
                skills=[SkillOut.model_validate(skill, from_attributes=True) for skill in project.skills],
                members=[UserOut.model_validate(user, from_attributes=True) for user in project.members],
                comments_count=len(project.comments),
                vote_count=db.query(
                    func.sum(case((ProjectVote.is_upvote, 1), else_=-1))
                ).filter(ProjectVote.project_id == project.id).scalar() or 0
            )
            for project in projects
        ]

        return {
            "items": formatted_projects,
            "total": total_count,
            "page": page,
            "page_size": page_size,
            "total_pages": total_pages
        }

    except Exception as e:
        logger.error(f"Error filtering projects: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to filter projects")

# üîπ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ ID
@router.get("/{project_id}", response_model=ProjectOut)
def read_project(project_id: int, db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –µ–≥–æ ID.
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    vote_count = db.query(
        func.sum(case((ProjectVote.is_upvote, 1), else_=-1))
    ).filter(ProjectVote.project_id == project_id).scalar() or 0

    return ProjectOut(
            id=project.id,
            name=project.name,
            description=project.description,
            owner=UserOut.model_validate(project.owner) if project.owner else None,
            tags=[TagOut.model_validate(tag, from_attributes=True) for tag in project.tags],
            skills=[SkillOut.model_validate(skill, from_attributes=True) for skill in project.skills],
            members=[UserOut.model_validate(user, from_attributes=True) for user in project.members],
            comments_count=len(project.comments),
            vote_count=db.query(
                func.sum(case((ProjectVote.is_upvote, 1), else_=-1))
            ).filter(ProjectVote.project_id == project.id).scalar() or 0
        )

# üîπ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
@router.put("/{project_id}", response_model=ProjectOut, summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
def update_project(
    project_id: int,
    project_data: ProjectUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü).
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if project.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–æ–π –ø—Ä–æ–µ–∫—Ç")

    project.name = project_data.name or project.name
    project.description = project_data.description or project.description

    db.commit()
    db.refresh(project)
    return ProjectOut.model_validate(project)

# üîπ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
@router.delete("/{project_id}", summary="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
def delete_project(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü).
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if project.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π –ø—Ä–æ–µ–∫—Ç")

    # Delete project recommendations first
    db.query(ProjectRecommendation).filter(
        ProjectRecommendation.to_project_id == project_id
    ).delete(synchronize_session=False)

    # Now delete the project
    db.delete(project)
    db.commit()
    return {"detail": "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"}

@router.get("/{project_id}/profile", response_model=ProjectProfileOut)
def get_project_profile(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è.
    –í–∫–ª—é—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–µ, —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö, –∑–∞—è–≤–∫–∞—Ö (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞), —Å—Ç–∞—Ç—É—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.
    """
    # Fetch project
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # Calculate vote count
    vote_count = db.query(
        func.sum(case((ProjectVote.is_upvote, 1), else_=-1))
    ).filter(ProjectVote.project_id == project_id).scalar() or 0

    # Project details
    project_out = ProjectOut(
        id=project.id,
        name=project.name,
        description=project.description,
        owner=UserOut.model_validate(project.owner) if project.owner else None,
        tags=[TagOut.model_validate(tag, from_attributes=True) for tag in project.tags],
        skills=[SkillOut.model_validate(skill, from_attributes=True) for skill in project.skills],
        members=[UserOut.model_validate(user, from_attributes=True) for user in project.members],
        comments_count=len(project.comments),
        vote_count=vote_count
    )

    # Members (redundant with project_out.members, but included for consistency)
    members = [UserOut.model_validate(user) for user in project.members]

    # Applications (only for owner)
    applications = None
    if project.owner_id == current_user.id:
        applicants = db.execute(
            project_applications.select().where(project_applications.c.project_id == project_id)
        ).mappings().fetchall()  # Add .mappings() here
        applicant_ids = [app["user_id"] for app in applicants]
        users = db.query(User).filter(User.id.in_(applicant_ids)).all()
        applications = [UserOut.model_validate(user) for user in users]

    # Comments
    comments = db.query(ProjectComment).filter(ProjectComment.project_id == project_id).all()
    comments_out = [
        CommentOut(
            id=comment.id,
            content=comment.content,
            user_id=comment.user_id,
            created_at=comment.created_at,
            user={
                "username": comment.user.username if comment.user else "Unknown",
                "avatar_url": comment.user.avatar_url if comment.user else None
            }
        )
        for comment in comments
    ]

    return ProjectProfileOut(
        project=project_out,
        members=members,
        applications=applications,
        comments=comments_out
    )

# üîπ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ
@router.post("/{project_id}/apply", summary="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
def apply_to_project(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)

):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if db.query(project_members_association).filter_by(user_id=current_user.id, project_id=project_id).first():
        raise HTTPException(status_code=400, detail="–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞")

    if db.query(project_applications).filter_by(user_id=current_user.id, project_id=project_id).first():
        raise HTTPException(status_code=400, detail="–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É")

    db.execute(project_applications.insert().values(user_id=current_user.id, project_id=project_id))
    current_user.last_active = datetime.now()
    db.commit()
    db.commit()
    return {"detail": "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞"}

# üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
@router.get("/{project_id}/members", summary="–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
def get_project_members(
    project_id: int,
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    members = db.execute(
        project_members_association.select().where(
            project_members_association.c.project_id == project_id
        )
    ).fetchall()

    if not members:
        return {"detail": "–í –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"}

    member_ids = [member["user_id"] for member in members]
    users = db.query(User).filter(User.id.in_(member_ids)).all()
    return [UserOut.model_validate(user) for user in users]

# üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç
@router.get("/{project_id}/applications", response_model=list[UserOut], summary="–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
def get_project_applications(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    # Fetch the project by ID
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # Check if the current user is the project owner
    if project.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞")

    # Access applicants directly through the relationship
    applicants = project.applicants
    return [UserOut.model_validate(user) for user in applicants]

# üîπ –û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
@router.post("/{project_id}/applications/{user_id}/decision", summary="–ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
def decide_application(
    project_id: int,
    user_id: int,
    request: ApplicationDecisionRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if project.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞")

    application = db.execute(
        project_applications.select().where(
            (project_applications.c.project_id == project_id) &
            (project_applications.c.user_id == user_id)
        )
    ).fetchone()

    if not application:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if request.decision == ApplicationStatus.ACCEPTED:
        db.execute(project_members_association.insert().values(user_id=user_id, project_id=project_id))
        db.execute(project_applications.delete().where(
            (project_applications.c.project_id == project_id) &
            (project_applications.c.user_id == user_id)
        ))
        db.commit()
        return {"detail": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç –≤ –ø—Ä–æ–µ–∫—Ç"}
    else:
        db.execute(project_applications.delete().where(
            (project_applications.c.project_id == project_id) &
            (project_applications.c.user_id == user_id)
        ))
        db.commit()
        return {"detail": "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"}

# üîπ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
@router.delete("/{project_id}/members/{user_id}", summary="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞")
def remove_user_from_project(
    project_id: int,
    user_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if project.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞")

    member = db.execute(
        project_members_association.select().where(
            (project_members_association.c.project_id == project_id) &
            (project_members_association.c.user_id == user_id)
        )
    ).fetchone()

    if not member:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞")

    db.execute(project_members_association.delete().where(
        (project_members_association.c.project_id == project_id) &
        (project_members_association.c.user_id == user_id)
    ))
    db.commit()
    return {"detail": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"}

# üîπ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–æ–µ–∫—Ç (upvote/downvote)
@router.post("/{project_id}/vote")
def vote_project(
    project_id: int,
    vote_data: VoteRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–æ–µ–∫—Ç (upvote –∏–ª–∏ downvote).
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    existing_vote = db.query(ProjectVote).filter_by(user_id=current_user.id, project_id=project_id).first()

    if existing_vote:
        if existing_vote.is_upvote == vote_data.is_upvote:
            db.delete(existing_vote)
            db.commit()
        else:
            existing_vote.is_upvote = vote_data.is_upvote
            db.commit()
    else:
        new_vote = ProjectVote(user_id=current_user.id, project_id=project_id, is_upvote=vote_data.is_upvote)
        db.add(new_vote)
        db.commit()

    # Get the actual vote count after the operation
    vote_count = db.query(
        func.sum(case((ProjectVote.is_upvote, 1), else_=-1))
    ).filter(ProjectVote.project_id == project_id).scalar() or 0

    return {
        "detail": "–ì–æ–ª–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω" if not existing_vote else "–ì–æ–ª–æ—Å –∏–∑–º–µ–Ω–µ–Ω" if existing_vote.is_upvote != vote_data.is_upvote else "–ì–æ–ª–æ—Å —É–¥–∞–ª–µ–Ω",
        "vote_count": vote_count
    }

# üîπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–∞
@router.get("/{project_id}/vote_status", response_model=VoteStatusResponse)
def get_vote_status(
    project_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ –ø—Ä–æ–µ–∫—Ç –∏ –±—ã–ª –ª–∏ —ç—Ç–æ upvote –∏–ª–∏ downvote.
    """
    # Get user's vote status
    vote = db.query(ProjectVote).filter_by(user_id=current_user.id, project_id=project_id).first()
    
    # Get total vote count
    vote_count = db.query(
        func.sum(case((ProjectVote.is_upvote, 1), else_=-1))
    ).filter(ProjectVote.project_id == project_id).scalar() or 0

    if vote:
        return {"has_voted": True, "is_upvote": vote.is_upvote, "vote_count": vote_count}
    return {"has_voted": False, "is_upvote": None, "vote_count": vote_count}

# üîπ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–æ–µ–∫—Ç—É
@router.post("/{project_id}/comment", response_model=CommentOut)
def comment_project(
    project_id: int,
    comment_data: CommentCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–æ–µ–∫—Ç—É.
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    new_comment = ProjectComment(
        content=comment_data.content,
        user_id=current_user.id,
        project_id=project_id
    )
    db.add(new_comment)
    db.commit()
    db.refresh(new_comment)

    return CommentOut(
        id=new_comment.id,
        content=new_comment.content,
        user_id=new_comment.user_id,
        created_at=new_comment.created_at,
        user={
            "username": current_user.username,
            "avatar_url": current_user.avatar_url
        }
    )

# üîπ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
@router.get("/{project_id}/comments", response_model=List[CommentOut])
def get_project_comments(
    project_id: int,
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    project = db.query(Project).filter(Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    comments = db.query(ProjectComment).filter(ProjectComment.project_id == project_id).all()
    return [
        CommentOut(
            id=comment.id,
            content=comment.content,
            user_id=comment.user_id,
            created_at=comment.created_at,
            user={"username": comment.user.username if comment.user else "Unknown", "avatar_url": comment.user.avatar_url if comment.user else None}        )
        for comment in comments
    ]

#  added search request
@router.get("/search", response_model=List[ProjectOut])
def search_projects(
    query: str = Query(..., min_length=1, example="blockchain"),
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—á–∏–Ω–∞—è —Å 1"),
    page_size: int = Query(10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (1-100)"),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–≥–∞–º
    """
    # Initialize logger with module name for better tracking
    logger = get_logger(__name__)

    try:
        # Log the start of the search with parameters
        logger.info(f"Starting project search: query='{query}', page={page}, page_size={page_size}")

        # Base query with eager loading of related data
        query_base = db.query(Project).options(
            joinedload(Project.owner),
            joinedload(Project.tags),
            joinedload(Project.skills),
            joinedload(Project.members)
        )

        # Apply filters
        results = query_base.filter(
            (Project.name.ilike(f"%{query}%")) |
            (Project.description.ilike(f"%{query}%")) |
            (Project.tags.any(Tag.name.ilike(f"%{query}%")))
        ).order_by(Project.created_at.desc())

        # Get total count for pagination info
        total = results.count()

        # Apply pagination
        paginated_results = results.offset((page - 1) * page_size).limit(page_size).all()

        # Log successful completion with result details
        logger.info(f"Search completed: found {total} projects, returning {len(paginated_results)} on page {page}")

        return paginated_results

    except Exception as e:
        # Log error with details
        logger.error(f"Search failed: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal server error")