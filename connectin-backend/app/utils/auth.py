"""
auth.py:
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Google –∏ GitHub OAuth.
"""

import logging
from typing import Dict, Optional
from passlib.context import CryptContext
from authlib.integrations.starlette_client import OAuth
from fastapi import Request
from app.core.config import settings
from starlette.responses import RedirectResponse

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ bcrypt –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OAuth
oauth = OAuth()

# üîµ –ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ OAuth
class OAuthSettings:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ OAuth –¥–ª—è Google –∏ GitHub."""
    def __init__(self):
        self.google = {
            "client_id": settings.GOOGLE_CLIENT_ID,
            "client_secret": settings.GOOGLE_CLIENT_SECRET,
            "server_metadata_url": "https://accounts.google.com/.well-known/openid-configuration",
            "client_kwargs": {"scope": "openid email profile"},
        }
        self.github = {
            "client_id": settings.GITHUB_CLIENT_ID,
            "client_secret": settings.GITHUB_CLIENT_SECRET,
            "authorize_url": "https://github.com/login/oauth/authorize",
            "access_token_url": "https://github.com/login/oauth/access_token",
            "client_kwargs": {"scope": "user:email"},
        }

oauth_settings = OAuthSettings()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Google OAuth
try:
    oauth.register(name="google", **oauth_settings.google)
    logger.info("‚úÖ Google OAuth —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google OAuth: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è GitHub OAuth
try:
    oauth.register(name="github", **oauth_settings.github)
    logger.info("‚úÖ GitHub OAuth —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub OAuth: {e}")

# üîπ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏
def hash_password(password: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö—ç—à –ø–∞—Ä–æ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è bcrypt."""
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö—ç—à–∞ –ø–∞—Ä–æ–ª—è –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è."""
    return pwd_context.verify(plain_password, hashed_password)

# üîµ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Google OAuth
async def generate_google_login_url(request: Request) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google OAuth."""
    try:
        redirect = await oauth.google.authorize_redirect(request, settings.GOOGLE_REDIRECT_URI)
        login_url = redirect.headers["location"]
        logger.info(f"üîπ Google Login URL: {login_url}")
        return login_url
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Google Login URL: {e}")
        return None

async def handle_google_callback(request: Request) -> Optional[Dict[str, str]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç Google OAuth –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    try:
        token = await oauth.google.authorize_access_token(request)
        logger.info("üîπ Google OAuth Token –ø–æ–ª—É—á–µ–Ω.")
        user_info = token.get("userinfo", {})
        if not user_info:
            raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}")
        return {
            "email": user_info.get("email"),
            "name": user_info.get("name", ""),
            "picture": user_info.get("picture", ""),
            "sub": user_info.get("sub"),
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Google OAuth Callback: {e}")
        return None

# üîµ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è GitHub OAuth
async def generate_github_login_url(request: Request) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ GitHub OAuth."""
    try:
        redirect = await oauth.github.authorize_redirect(request, settings.GITHUB_REDIRECT_URI)
        login_url = redirect.headers["location"]
        logger.info(f"üîπ GitHub Login URL: {login_url}")
        return login_url
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GitHub Login URL: {e}")
        return None

async def get_github_user_info(token: dict) -> Optional[Dict[str, str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ GitHub API."""
    try:
        resp = await oauth.github.get("https://api.github.com/user", token=token)
        user_data = resp.json()
        if not user_data.get("email"):
            resp_emails = await oauth.github.get("https://api.github.com/user/emails", token=token)
            emails = resp_emails.json()
            user_data["email"] = next((e["email"] for e in emails if e["primary"]), None)
        user_data["html_url"] = user_data.get("html_url", "")
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub: {user_data}")
        return user_data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö GitHub: {e}")
        return None

async def handle_github_callback(request: Request) -> Optional[Dict[str, str]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç GitHub OAuth –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    try:
        token = await oauth.github.authorize_access_token(request)
        logger.info("üîπ GitHub OAuth Token –ø–æ–ª—É—á–µ–Ω.")
        user_info = await get_github_user_info(token)
        if not user_info:
            raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return user_info
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GitHub OAuth Callback: {e}")
        return None