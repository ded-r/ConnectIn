"""
auth.py:
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Google OAuth.
"""

import logging
from passlib.context import CryptContext
from authlib.integrations.starlette_client import OAuth
from fastapi import Request
from app.core.config import settings

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ bcrypt –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OAuth
oauth = OAuth()

try:
    oauth.register(
        name="google",
        client_id=settings.GOOGLE_CLIENT_ID,
        client_secret=settings.GOOGLE_CLIENT_SECRET,
        server_metadata_url="https://accounts.google.com/.well-known/openid-configuration",
        client_kwargs={"scope": "openid email profile"},
    )
    logger.info("‚úÖ Google OAuth —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google OAuth: {e}")


async def generate_google_login_url(request: Request) -> str:
    """
    üìå –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google OAuth.
    """
    try:
        login_url = await oauth.google.authorize_redirect(request, settings.GOOGLE_REDIRECT_URI)
        redirect_url = login_url.headers["location"]  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π URL –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        logger.info(f"üîπ Google Login URL: {redirect_url}")
        return redirect_url
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Google Login URL: {e}")
        return None



async def handle_google_callback(request: Request) -> dict:
    """
    üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç Google OAuth –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    try:
        token = await oauth.google.authorize_access_token(request)
        logger.info("üîπ Google OAuth Token –ø–æ–ª—É—á–µ–Ω.")

        user_info = token.get("userinfo", {})
        if not user_info:
            raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}")
        return {
            "email": user_info.get("email"),
            "name": user_info.get("name", ""),
            "picture": user_info.get("picture", ""),
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Google OAuth Callback: {e}")
        return None


# ... –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google OAuth

# üîµ –î–æ–±–∞–≤–ª—è–µ–º GitHub OAuth
try:
    oauth.register(
        name="github",
        client_id=settings.GITHUB_CLIENT_ID,
        client_secret=settings.GITHUB_CLIENT_SECRET,
        authorize_url="https://github.com/login/oauth/authorize",
        access_token_url="https://github.com/login/oauth/access_token",
        client_kwargs={"scope": "user:email"},  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
    )
    logger.info("‚úÖ GitHub OAuth —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub OAuth: {e}")

#------------start github auth
# üîµ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub
async def generate_github_login_url(request: Request) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ GitHub OAuth."""
    try:
        redirect = await oauth.github.authorize_redirect(
            request,
            settings.GITHUB_REDIRECT_URI
        )
        return redirect.headers["location"]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GitHub URL: {e}")
        return None


async def get_github_user_info(token: dict) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ GitHub API."""
    try:
        resp = await oauth.github.get("https://api.github.com/user", token=token)
        user_data = resp.json()

        # –ï—Å–ª–∏ email –Ω–µ –ø—Ä–∏—à–µ–ª, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        if not user_data.get("email"):
            resp_emails = await oauth.github.get(
                "https://api.github.com/user/emails",
                token=token
            )
            emails = resp_emails.json()
            user_data["email"] = next(
                (e["email"] for e in emails if e["primary"]),
                None
            )

        # –î–æ–±–∞–≤–ª—è–µ–º URL –ø—Ä–æ—Ñ–∏–ª—è GitHub
        user_data["html_url"] = user_data.get("html_url", "")  # –ü—Ä–∏–º–µ—Ä: "https://github.com/johndoe"
        return user_data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö GitHub: {e}")
        return None

#---------------end github------------

def hash_password(password: str) -> str:
    """
    üìå –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö—ç—à –ø–∞—Ä–æ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è bcrypt.
    """
    return pwd_context.hash(password)


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    üìå –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö—ç—à–∞ –ø–∞—Ä–æ–ª—è –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è.
    """
    return pwd_context.verify(plain_password, hashed_password)
