# connectin-backend/app/utils/logger.py
import logging
from logging import Logger
import os
import datetime
from typing import Optional, Dict, Any
import inspect
import threading

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
_thread_local_data = threading.local()


class ConnectInLogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ConnectIn —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∂–∏ –∏ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞."""

    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∂–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤
    LEVEL_EMOJI = {
        'DEBUG': 'üîç',
        'INFO': '‚ÑπÔ∏è',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üî•'
    }

    # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∂–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ ConnectIn
    MODULE_EMOJI = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        'auth': 'üîê',
        'user': 'üë§',
        'chat': 'üí¨',
        'message': 'üì®',
        'ws': 'üì°',
        'websocket': 'üì°',
        'project': 'üìã',
        'team': 'üë•',
        'skill': 'üõ†Ô∏è',
        'post': 'üìù',
        'todo': '‚úÖ',
        'tag': 'üè∑Ô∏è',

        # –°–µ—Ä–≤–∏—Å—ã
        'service': '‚öôÔ∏è',
        'ai_service': 'ü§ñ',
        'chat_service': 'üí¨',
        'pdf_service': 'üìÑ',

        # –•—Ä–∞–Ω–∏–ª–∏—â–∞
        'database': 'üóÉÔ∏è',
        's3': '‚òÅÔ∏è',
        'redis': 'üì¶',
        'elastic': 'üîç',

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ
        'middleware': 'üîÑ',
        'config': '‚öôÔ∏è',
        'main': 'üöÄ',
        'api': 'üåê',
        'schema': 'üìä',
        'model': 'üèóÔ∏è',
        'upload': 'üì§',
        'download': 'üì•',

        # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        'recommendation': 'üëç',
        'comment': 'üí≠',
        'like': '‚ù§Ô∏è',
        'save': 'üîñ',
        'vote': 'üó≥Ô∏è',
        'resume': 'üìë',
        'notification': 'üîî',

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        'default': 'üîß'
    }

    # ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    COLORS = {
        'DEBUG': '\033[94m',  # –°–∏–Ω–∏–π
        'INFO': '\033[92m',  # –ó–µ–ª—ë–Ω—ã–π
        'WARNING': '\033[93m',  # –ñ—ë–ª—Ç—ã–π
        'ERROR': '\033[91m',  # –ö—Ä–∞—Å–Ω—ã–π
        'CRITICAL': '\033[41m',  # –ë–µ–ª—ã–π –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º —Ñ–æ–Ω–µ
        'RESET': '\033[0m'  # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–æ–≤
    }

    @staticmethod
    def get_logger(name: str = None, module_emoji: Optional[str] = None) -> Logger:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —ç–º–æ–¥–∂–∏.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–æ–±—ã—á–Ω–æ __name__)
            module_emoji: –Ø–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–º–æ–¥–∂–∏ –¥–ª—è –º–æ–¥—É–ª—è

        –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
            logger = ConnectInLogger.get_logger(__name__)  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
            logger = ConnectInLogger.get_logger(__name__, "üí¨")  # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏
        """
        # –ï—Å–ª–∏ –∏–º—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥—É–ª—å –∏–∑ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤
        if name is None:
            frame = inspect.currentframe().f_back
            module = inspect.getmodule(frame)
            name = module.__name__ if module else "unknown"

        logger = logging.getLogger(name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —É–∂–µ –ª–æ–≥–≥–µ—Ä
        if not hasattr(_thread_local_data, 'initialized_loggers'):
            _thread_local_data.initialized_loggers = set()

        if name in _thread_local_data.initialized_loggers:
            return logger

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ —Å–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
        _thread_local_data.initialized_loggers.add(name)

        # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO
        log_level = os.getenv('LOG_LEVEL', 'INFO').upper()
        logger.setLevel(getattr(logging, log_level, logging.INFO))

        # –í–∫–ª—é—á–∞—Ç—å –ª–∏ —ç–º–æ–¥–∂–∏ –≤ –ª–æ–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω—ã)
        use_emoji = os.getenv('LOG_EMOJI', 'true').lower() == 'true'

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –º–æ–¥—É–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ
        if not module_emoji and use_emoji:
            module_parts = name.lower().split('.')

            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è
            for module_part in module_parts:
                if module_part in ConnectInLogger.MODULE_EMOJI:
                    module_emoji = ConnectInLogger.MODULE_EMOJI[module_part]
                    break

            # –ï—Å–ª–∏ —ç–º–æ–¥–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            if not module_emoji:
                for key, emoji in ConnectInLogger.MODULE_EMOJI.items():
                    if any(key in part for part in module_parts):
                        module_emoji = emoji
                        break

            # –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∂–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not module_emoji:
                module_emoji = ConnectInLogger.MODULE_EMOJI["default"]

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Å —ç–º–æ–¥–∂–∏ –º–æ–¥—É–ª—è
        module_prefix = f"{module_emoji} " if module_emoji and use_emoji else ""

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        class ColoredFormatter(logging.Formatter):
            """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∂–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""

            def format(self, record):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                timestamp = datetime.datetime.fromtimestamp(record.created).strftime('%H:%M:%S')

                # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∂–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞
                level_icon = ConnectInLogger.LEVEL_EMOJI.get(record.levelname, '‚Ä¢') if use_emoji else ''

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∞
                colored_level = f"{ConnectInLogger.COLORS.get(record.levelname, '')}{level_icon} {record.levelname}{ConnectInLogger.COLORS['RESET']}"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –º–æ–¥—É–ª—è (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –∏–º–µ–Ω–∏)
                module_short = record.name.split('.')[-1]

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                log_message = f"[{timestamp}] {colored_level} {module_prefix}{module_short}: {record.getMessage()}"

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if record.exc_info:
                    exception_msg = self.formatException(record.exc_info)
                    backtrace = f"\n{exception_msg}"
                    log_message = f"{log_message}{backtrace}"

                return log_message

        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤, –Ω–æ —Å —ç–º–æ–¥–∂–∏)
        class FileFormatter(logging.Formatter):
            """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ —Å —ç–º–æ–¥–∂–∏."""

            def format(self, record):
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–∞—Ç–æ–π –¥–ª—è —Ñ–∞–π–ª–æ–≤
                timestamp = self.formatTime(record, datefmt='%Y-%m-%d %H:%M:%S')

                # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∂–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞
                level_icon = ConnectInLogger.LEVEL_EMOJI.get(record.levelname, '') if use_emoji else ''

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞
                log_message = f"[{timestamp}] [{level_icon} {record.levelname}] {module_prefix}{record.name}: {record.getMessage()}"

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if record.exc_info:
                    exception_msg = self.formatException(record.exc_info)
                    backtrace = f"\n{exception_msg}"
                    log_message = f"{log_message}{backtrace}"

                return log_message

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if not logger.handlers:
            # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            console_handler = logging.StreamHandler()
            console_handler.setFormatter(ColoredFormatter())
            logger.addHandler(console_handler)

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
            if os.getenv('LOG_TO_FILE', 'False').lower() == 'true':
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                log_dir = os.path.join('connectin-backend', 'logs')
                os.makedirs(log_dir, exist_ok=True)

                # –§–∞–π–ª –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤
                main_file_handler = logging.FileHandler(f'{log_dir}/connectin.log')
                main_file_handler.setLevel(logging.INFO)
                main_file_handler.setFormatter(FileFormatter())
                logger.addHandler(main_file_handler)

                # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
                error_file_handler = logging.FileHandler(f'{log_dir}/errors.log')
                error_file_handler.setLevel(logging.ERROR)
                error_file_handler.setFormatter(FileFormatter())
                logger.addHandler(error_file_handler)

                # –î–ª—è –¥–µ–±–∞–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –¥–µ–±–∞–≥-—Ä–µ–∂–∏–º
                if log_level == 'DEBUG':
                    debug_file_handler = logging.FileHandler(f'{log_dir}/debug.log')
                    debug_file_handler.setLevel(logging.DEBUG)
                    debug_file_handler.setFormatter(FileFormatter())
                    logger.addHandler(debug_file_handler)

        return logger


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_logger –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_logger(name: str = None, module_emoji: Optional[str] = None) -> Logger:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —ç–º–æ–¥–∂–∏.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏ –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è
        logger = get_logger(__name__)

        # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏
        logger = get_logger(__name__, "üöÄ")

        # –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–¥–µ:
        logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    """
    return ConnectInLogger.get_logger(name, module_emoji)