"""Add blacklisted_tokens table

Revision ID: f26a7845b6ea
Revises: 8caa78976f9e
Create Date: 2025-03-23 17:57:09.969575

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f26a7845b6ea'
down_revision: Union[str, None] = '8caa78976f9e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('skill_category_mapping')
    op.drop_table('skill_categories')
    op.alter_column('conversations', 'id',
               existing_type=sa.INTEGER(),
               comment='Уникальный ID чата',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('conversations', 'type',
               existing_type=postgresql.ENUM('direct', 'project', 'team', name='conversationtype'),
               comment='Тип чата',
               existing_nullable=False)
    op.alter_column('conversations', 'project_id',
               existing_type=sa.INTEGER(),
               comment='Связь с проектом',
               existing_nullable=True)
    op.alter_column('conversations', 'team_id',
               existing_type=sa.INTEGER(),
               comment='Связь с командой',
               existing_nullable=True)
    op.alter_column('messages', 'id',
               existing_type=sa.INTEGER(),
               comment='Уникальный ID сообщения',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('messages', 'content',
               existing_type=sa.TEXT(),
               comment='Текст сообщения',
               existing_nullable=False)
    op.alter_column('messages', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               comment='Время отправки',
               existing_nullable=True)
    op.create_index(op.f('ix_messages_timestamp'), 'messages', ['timestamp'], unique=False)
    op.drop_constraint('messages_sender_id_fkey', 'messages', type_='foreignkey')
    op.drop_constraint('messages_conversation_id_fkey', 'messages', type_='foreignkey')
    op.create_foreign_key(None, 'messages', 'conversations', ['conversation_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'messages', 'users', ['sender_id'], ['id'], ondelete='SET NULL')
    op.alter_column('project_comments', 'content',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('project_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_recommendations_id'), 'recommendations', ['id'], unique=False)
    op.drop_constraint('recommendations_project_id_fkey', 'recommendations', type_='foreignkey')
    op.drop_constraint('recommendations_team_id_fkey', 'recommendations', type_='foreignkey')
    op.drop_constraint('recommendations_post_id_fkey', 'recommendations', type_='foreignkey')
    op.drop_column('recommendations', 'project_id')
    op.drop_column('recommendations', 'team_id')
    op.drop_column('recommendations', 'score')
    op.drop_column('recommendations', 'created_at')
    op.drop_column('recommendations', 'post_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('recommendations', sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('recommendations', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('recommendations', sa.Column('score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True))
    op.add_column('recommendations', sa.Column('team_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('recommendations', sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('recommendations_post_id_fkey', 'recommendations', 'posts', ['post_id'], ['id'])
    op.create_foreign_key('recommendations_team_id_fkey', 'recommendations', 'teams', ['team_id'], ['id'])
    op.create_foreign_key('recommendations_project_id_fkey', 'recommendations', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_recommendations_id'), table_name='recommendations')
    op.alter_column('project_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('project_comments', 'content',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.create_foreign_key('messages_conversation_id_fkey', 'messages', 'conversations', ['conversation_id'], ['id'])
    op.create_foreign_key('messages_sender_id_fkey', 'messages', 'users', ['sender_id'], ['id'])
    op.drop_index(op.f('ix_messages_timestamp'), table_name='messages')
    op.alter_column('messages', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Время отправки',
               existing_nullable=True)
    op.alter_column('messages', 'content',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Текст сообщения',
               existing_nullable=False)
    op.alter_column('messages', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Уникальный ID сообщения',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('conversations', 'team_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Связь с командой',
               existing_nullable=True)
    op.alter_column('conversations', 'project_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Связь с проектом',
               existing_nullable=True)
    op.alter_column('conversations', 'type',
               existing_type=postgresql.ENUM('direct', 'project', 'team', name='conversationtype'),
               comment=None,
               existing_comment='Тип чата',
               existing_nullable=False)
    op.alter_column('conversations', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Уникальный ID чата',
               existing_nullable=False,
               autoincrement=True)
    op.create_table('skill_categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('skill_categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='skill_categories_pkey'),
    sa.UniqueConstraint('name', name='skill_categories_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('skill_category_mapping',
    sa.Column('skill_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['skill_categories.id'], name='skill_category_mapping_category_id_fkey'),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], name='skill_category_mapping_skill_id_fkey'),
    sa.PrimaryKeyConstraint('skill_id', 'category_id', name='skill_category_mapping_pkey')
    )
    # ### end Alembic commands ###
