"""Add skill mapping, extend recommendation

Revision ID: 4e7060b3ac97
Revises: c90d20ef7757
Create Date: 2025-03-30 22:29:46.563466

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4e7060b3ac97'
down_revision: Union[str, None] = 'c90d20ef7757'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('skill_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_skill_categories_id'), 'skill_categories', ['id'], unique=False)
    op.create_table('skill_mappings',
    sa.Column('skill_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['skill_categories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('skill_id', 'category_id')
    )
    op.create_table('project_recommendations',
    sa.Column('recommendation_id', sa.Integer(), nullable=False),
    sa.Column('to_project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['recommendation_id'], ['recommendations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['to_project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recommendation_id')
    )
    op.create_table('team_recommendations',
    sa.Column('recommendation_id', sa.Integer(), nullable=False),
    sa.Column('to_team_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['recommendation_id'], ['recommendations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['to_team_id'], ['teams.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recommendation_id')
    )
    op.create_table('todo_comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('todo_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['todo_id'], ['todos.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('post_recommendations',
    sa.Column('recommendation_id', sa.Integer(), nullable=False),
    sa.Column('to_post_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['recommendation_id'], ['recommendations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['to_post_id'], ['posts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recommendation_id')
    )
    op.alter_column('post_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.add_column('recommendations', sa.Column('score', sa.Float(), nullable=True))
    op.add_column('recommendations', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('recommendations', sa.Column('recommendation_type', sa.String(length=20), nullable=True))

    # Update existing records with default values
    op.execute("UPDATE recommendations SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE recommendations SET recommendation_type = 'project' WHERE recommendation_type IS NULL")

    # Make columns non-nullable after setting defaults
    op.alter_column('recommendations', 'created_at',
               existing_type=sa.DateTime(),
               nullable=False)
    op.alter_column('recommendations', 'recommendation_type',
               existing_type=sa.String(length=20),
               nullable=False)

    op.drop_constraint('recommendations_from_user_id_fkey', 'recommendations', type_='foreignkey')
    op.drop_constraint('recommendations_to_user_id_fkey', 'recommendations', type_='foreignkey')
    op.create_foreign_key(None, 'recommendations', 'users', ['from_user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('recommendations', 'to_user_id')
    
    # Add is_admin as nullable first
    op.add_column('user_teams', sa.Column('is_admin', sa.Boolean(), nullable=True))
    
    # Set default value for existing records
    op.execute("UPDATE user_teams SET is_admin = FALSE WHERE is_admin IS NULL")
    
    # Make it non-nullable
    op.alter_column('user_teams', 'is_admin',
               existing_type=sa.Boolean(),
               nullable=False)
               
    op.drop_constraint('user_teams_team_id_fkey', 'user_teams', type_='foreignkey')
    op.drop_constraint('user_teams_user_id_fkey', 'user_teams', type_='foreignkey')
    op.create_foreign_key(None, 'user_teams', 'teams', ['team_id'], ['id'])
    op.create_foreign_key(None, 'user_teams', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user_teams', type_='foreignkey')
    op.drop_constraint(None, 'user_teams', type_='foreignkey')
    op.create_foreign_key('user_teams_user_id_fkey', 'user_teams', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('user_teams_team_id_fkey', 'user_teams', 'teams', ['team_id'], ['id'], ondelete='CASCADE')
    
    # Make is_admin nullable before dropping
    op.alter_column('user_teams', 'is_admin',
               existing_type=sa.Boolean(),
               nullable=True)
    op.drop_column('user_teams', 'is_admin')
    
    op.add_column('recommendations', sa.Column('to_user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'recommendations', type_='foreignkey')
    op.create_foreign_key('recommendations_to_user_id_fkey', 'recommendations', 'users', ['to_user_id'], ['id'])
    op.create_foreign_key('recommendations_from_user_id_fkey', 'recommendations', 'users', ['from_user_id'], ['id'])
    
    # First make columns nullable before dropping
    op.alter_column('recommendations', 'recommendation_type',
               existing_type=sa.String(length=20),
               nullable=True)
    op.alter_column('recommendations', 'created_at',
               existing_type=sa.DateTime(),
               nullable=True)
               
    op.drop_column('recommendations', 'recommendation_type')
    op.drop_column('recommendations', 'created_at')
    op.drop_column('recommendations', 'score')
    op.alter_column('post_comments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_table('post_recommendations')
    op.drop_table('todo_comments')
    op.drop_table('team_recommendations')
    op.drop_table('project_recommendations')
    op.drop_table('skill_mappings')
    op.drop_index(op.f('ix_skill_categories_id'), table_name='skill_categories')
    op.drop_table('skill_categories')
    # ### end Alembic commands ###
